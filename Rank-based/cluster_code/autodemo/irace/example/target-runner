#!/bin/bash
###############################################################################
# This script is to tune the Finite State Machine inside the AutoMoDe software.
#
# PARAMETERS:
# $1 is the ID of the candidate to be evaluated
# $2 is the instance ID
# $3 is the seed
# $4 is the instance name
# The rest ($* after `shift 4') are parameters for running AutoMoDe (i.e. the
#					  finite state machine configuration).
#
# RETURN VALUE:
# This script should print a single numerical value (the value to be minimized).
###############################################################################

# Path to the AutoMoDe software:
# Note that this script is ran from the execution directory

EXE=/home/jszpirer/Mandarina/AutoMoDe-tuttifrutti/bin/automode_main
IRL=/home/jszpirer/Mandarina/autodemo/irl_majorana_Mandarina.py

CONFIG_ID="$1"
INSTANCE_ID="$2"
SEED="$3"
INSTANCE="$4"
NEWSEED="$5" #Seul truc nouveau par rapport Ã  autodemo

# All other parameters are the candidate parameters to be passed to program
shift 4 || error "Not enough parameters to $0"
CONFIG_PARAMS=$*

# In case of error, we print the current time:
error() {
    echo "`TZ=UTC date`: error: $@" >&2
    exit 1
}

if [ ! -x "${EXE}" ]; then
    error "${EXE}: not found or not executable (pwd: $(pwd))"
fi


start=`date +%s`

DIR_SCORE="/tmp/"

FIRST_INSTANCE='sequence-1.argos'

if [[ $INSTANCE == *"sequence-1.argos"* ]]; then
    INSTANCE_NM="1"
else
    INSTANCE_NM="2"
fi

FILE_SCORE="$CONFIG_ID-$INSTANCE_NM-$NEWSEED.txt"

if [ $INSTANCE_NM -eq "1" ]; then
   if ls -f $FILE_SCORE 1> /dev/null 2>&1; then
      SCORE=$(cat $FILE_SCORE | grep -o -E 'BlueObjective [-+0-9.e]+' | cut -d ' ' -f2)
      if ! [[ "$SCORE" =~ ^[-+0-9.e]+$ ]] ; then
          error "Output is not a number"
      fi
      rm -f "$FILE_SCORE"
      #echo "Deleted file $FILE_SCORE" >> "deleted_files.txt"
  else
      # OUTPUT=$($EXE -n -c $INSTANCE --seed $NEWSEED --fsm-config ${CONFIG_PARAMS})
      OUTPUT=$(python3 $IRL "--fsm-config ${CONFIG_PARAMS}" "${NEWSEED}")

      # Extract the blue score from the AutoMoDe (i.e. and ARGoS) output
      SCORE=$(echo ${OUTPUT} | grep -o -E 'BlueObjective [-+0-9.e]+' | cut -d ' ' -f2)
      if ! [[ "$SCORE" =~ ^[-+0-9.e]+$ ]] ; then
          error "Output is not a number"
      fi

      # Extract the red score from the AutoMoDe (i.e. and ARGoS) output
      LOG_SCORE=$(echo ${OUTPUT} | grep -o -E 'RedObjective [-+0-9.e]+' | cut -d ' ' -f2)
      if ! [[ "$LOG_SCORE" =~ ^[-+0-9.e]+$ ]] ; then
         error "Output is not a number"
      fi

      echo "RedObjective $LOG_SCORE" >> "$CONFIG_ID-2-$NEWSEED.txt"
  fi	
else
   if ls -f $FILE_SCORE 1> /dev/null 2>&1; then
      SCORE=$(cat $FILE_SCORE | grep -o -E 'RedObjective [-+0-9.e]+' | cut -d ' ' -f2)
      if ! [[ "$SCORE" =~ ^[-+0-9.e]+$ ]] ; then
          error "Output is not a number"
      fi
      rm -f "$FILE_SCORE"
      #echo "Deleted file $FILE_SCORE" >> "deleted_files.txt"
  else
      # OUTPUT=$($EXE -n -c $INSTANCE --seed $NEWSEED --fsm-config ${CONFIG_PARAMS})
      OUTPUT=$(python3 $IRL "--fsm-config ${CONFIG_PARAMS}" "${NEWSEED}")

      # Extract the blue score from the AutoMoDe (i.e. and ARGoS) output
      SCORE=$(echo ${OUTPUT} | grep -o -E 'RedObjective [-+0-9.e]+' | cut -d ' ' -f2)
      if ! [[ "$SCORE" =~ ^[-+0-9.e]+$ ]] ; then
          error "Output is not a number"
      fi

      # Extract the red score from the AutoMoDe (i.e. and ARGoS) output
      LOG_SCORE=$(echo ${OUTPUT} | grep -o -E 'BlueObjective [-+0-9.e]+' | cut -d ' ' -f2)
      if ! [[ "$LOG_SCORE" =~ ^[-+0-9.e]+$ ]] ; then
         error "Output is not a number"
      fi

      echo "BlueObjective $LOG_SCORE" >> "$CONFIG_ID-1-$NEWSEED.txt"
  fi

fi

# Print score!
echo "$SCORE"

exit 0
